name: Deploy to AWS ECS (GitHub Secrets)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: perfect-po-api
  ECS_CLUSTER: perfect-po-cluster
  ECS_SERVICE: perfect-po-api-service
  ECS_TASK_DEFINITION: perfect-po-api-task

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deployment/prod/Dockerfile.prod .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f deployment/prod/Dockerfile.prod .
        
        echo "Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Prepare ECS Task Definition
      id: task-def
      run: |
        # Read the task definition template
        TASK_DEF_TEMPLATE="deployment/aws/ecs-task-definition-github-secrets.json"
        
        # Replace placeholders with actual values
        sed -e "s/ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g" \
            -e "s/MONGODB_URI_PLACEHOLDER/${{ secrets.MONGODB_URI }}/g" \
            -e "s/JWT_SECRET_KEY_PLACEHOLDER/${{ secrets.JWT_SECRET_KEY }}/g" \
            -e "s/KEEPA_API_KEY_PLACEHOLDER/${{ secrets.KEEPA_API_KEY }}/g" \
            -e "s/AWS_ACCESS_KEY_ID_PLACEHOLDER/${{ secrets.AWS_ACCESS_KEY_ID }}/g" \
            -e "s/AWS_SECRET_ACCESS_KEY_PLACEHOLDER/${{ secrets.AWS_SECRET_ACCESS_KEY }}/g" \
            "$TASK_DEF_TEMPLATE" > task-definition.json
        
        echo "task-definition=task-definition.json" >> $GITHUB_OUTPUT

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Wait for service to be stable
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Get service URL
      id: service-url
      run: |
        # Get the service URL from ECS
        SERVICE_URL=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].loadBalancers[0].dnsName' \
          --output text)
        
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed to: $SERVICE_URL"

    - name: Test deployment
      run: |
        # Wait a bit for the service to be fully ready
        sleep 60
        
        # Test the health endpoint
        SERVICE_URL="${{ steps.service-url.outputs.service-url }}"
        if [ "$SERVICE_URL" != "None" ] && [ "$SERVICE_URL" != "" ]; then
          echo "Testing service at: $SERVICE_URL"
          curl -f "http://$SERVICE_URL/health" || exit 1
          echo "✅ Service is healthy!"
        else
          echo "⚠️  No load balancer URL found, skipping health check"
        fi

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📱 Service URL: ${{ steps.service-url.outputs.service-url }}"
        echo "🐳 Image: ${{ steps.build-image.outputs.image }}"
        echo "🏗️  Environment: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
